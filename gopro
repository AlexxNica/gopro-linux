#!/bin/bash
function timelapse() { 
    framerate="$1"
    filename="$2"
    resolution_width="$3"
    resolution_height="$4"
    ls -1tr *.JPG > gopro_timelapse_list.txt
    mencoder -nosound -ovc lavc -lavcopts \
        vcodec=mpeg4:mbd=2:trell:autoaspect:vqscale=3 \
        -vf scale=$resolution_width:$resolution_height -mf type=jpeg:fps=$framerate \
        mf://@gopro_timelapse_list.txt -o $filename
}

function superview() {
    for i in *.MP4;
        do name=`echo $i | cut -d'.' -f1`+S;
        echo $name;
        ffmpeg -loglevel 0 -i $i -q:a 1 -q:v 1 -vcodec mpeg4 -acodec ac3 -aspect 16:9 -strict experimental $name.MP4
    done
}

function fisheye(){
	#echo "https://gopro.com/help/articles/Question_Answer/HERO4-Field-of-View-FOV-Information"
	echo -ne "Resolution:\n-[0] 4:3 Wide FOV\n-[1] 4:3 Medium FOV\n-[2] 4:3 Narrow FOV\nPhoto resolution: "; read res
	vfov=0
	hfov=0
	diag=0
	case $res in
		0*)
		hfov=94.4;
		vfov=122.6;
		diag=149.2;;
		1*)
		hfov=72.6;
		vfov=94.4;
		diag=115.7;;
		2*)
		hfov=49.1;
		vfov=64.6;
		diag=79.7;;
	esac
	flength=`echo "$vfov/$hfov*$diag" | bc -l | head -n1 | cut -d "." -f1`
	if [ $1 = "" ]; then
		for photo in *.JPG;
		    do timestamp=`stat -c %y $photo`;
		    mogrify -distort barrel "0.5 0.5 -0.$flength -0.022" $photo;
		    touch -d "$timestamp" $photo;
		done
	else
		timestamp=`stat -c %y $1`;
		mogrify -distort barrel "0 0 -0.3" $1;
		touch -d "$timestamp" $1;
	fi
}

function fisheye_video(){
	#echo "https://gopro.com/help/articles/Question_Answer/HERO4-Field-of-View-FOV-Information"
	echo -ne "Resolution:\n-[0] 4:3 Wide FOV\n-[1] 4:3 Medium FOV\n-[2] 4:3 Narrow FOV\n-[3] 16:9 Wide FOV\n-[4] 16:9 Medium FOV\n-[5] 16:9 Narrow FOV\nVideo resolution: "; read res
	vfov=0
	hfov=0
	diag=0
	case $res in
		0*)
		hfov=94.4;
		vfov=122.6;
		diag=149.2;;
		1*)
		hfov=72.6;
		vfov=94.4;
		diag=115.7;;
		2*)
		hfov=49.1;
		vfov=64.6;
		diag=79.7;;
		3*)
		hfov=69.5;
		vfov=118.2;
		diag=133.6;;
		4*)
		hfov=55;
		vfov=94.4;
		diag=73.6;;
		5*)
		hfov=37.2;
		vfov=64.4;
		diag=73.6;;
	esac
	flength=`echo "$vfov/$hfov*$diag" | bc -l | head -n1 | cut -d "." -f1`
	if [ $1 = "" ]; then
		for video in *.MP4;
			do name=`echo $video | cut -d'.' -f1`_corrected;
			ffmpeg -loglevel 0 -i $video -vf "lenscorrection=cx=0.5:cy=0.5:k1=-0.$flength:k2=-0.022" $name.mp4;
		done
	else
		name=`echo $1 | cut -d'.' -f1`_corrected;
		ffmpeg -loglevel 0 -i $1 -vf "lenscorrection=cx=0.5:cy=0.5:k1=-0.$flength:k2=-0.022" $name.mp4;
	fi
}
function convert(){
	if [$1 = ""]; then
		for i in *.MP4;
		    do name=`echo $i | cut -d'.' -f1`;
		    echo $name;
		    ffmpeg -loglevel 0 -i $i -q:a 1 -q:v 1 -vcodec mpeg4 $name.mov;
		done
	else
		name=`echo $1 | cut -d'.' -f1`;
	   	echo $name;
	    	ffmpeg -loglevel 0 -i $1 -q:a 1 -q:v 1 -vcodec mpeg4 $name.mov;
	fi
}

function speed(){
    ffmpeg -loglevel 0 -i $1 -r $4 -vf "setpts=($3/1)*PTS" -q:a 1 -q:v 1 -vcodec libx264 $2
    echo "finished $1"
}

function trim(){
    ffmpeg -loglevel 0 -i $1 -ss $3 -t $4 -q:a 1 -q:v 1 -vcodec libx264 $2
}

function merge(){
	clips=${echo $1 | sed "s/,/\\n/g"}
	echo $clips > temp.txt
	#...
}
function sort(){
	mkdir $1
	cd $1
	mkdir -p videos/{single,chaptered,thumbnails,lowresvideos}
	mkdir -p photos/{single,timelapse-burst-continuous}
	cp -p ../GOPR*.MP4 videos/single
	cp -p ../GP*.MP4 videos/chaptered
	cp -p ../GOPR*.JPG photos/single
	cp -p ../G*.JPG photos/timelapse-burst-continuous
	cp -p ../*.LRV videos/lowresvideos
	cp -p ../*.THM videos/thumbnails
	echo "Finished!"
}
function help() {
    printf 'GoPro Tool for Linux OS\nAvailable commands:\n\n- gopro timelapse [fps] [outfilename] [res width] [res height]\nMakes a timelapse with pictures in the current folder, make sure to cd to a DCIM/XXXGOPRO folder!\nExample: gopro timelapse 30 goproTL.mp4 1920 1080\n\n- gopro superview\nApplies SuperView to all GoPro videos in the current dir\n\n- gopro fisheye\nFixes barrel distorsion to all GoPro pictures in the current folder\n\n- gopro convert\nConverts all GoPro MP4 videos to MPEG4 MOV videos for easy editing\n\n- gopro slowmo [video]\nReduces the speed in a High FPS GoPro Video\nExample: gopro slowmo GOPRO0553.MP4\n\n- gopro trim [input video] [output video] [HH:MM:SS start] [HH:MM:SS stop]\nTrims a video, use this to trim a slow motion video!\nExample: gopro trim GOPR0553.MP4 Trimmed.mp4 00:05:04 00:07:43\n\n- gopro sort\nSorts media, please execute in DCIM/XXXGOPRO!\n\nScript by Konrad Iturbe (@KonradIT on GitHub | @konrad_it on Twitter)\n'
}

echo "GoPro Tool for Linux"
echo "To see a list of commands and syntax available run: gopro help"
echo "Checking dependencies..."
hash ffmpeg 2> /dev/null || { echo >&2 "ffmpeg ..... Not installed!";}
hash mogrify 2> /dev/null || { echo >&2 "mogrify ..... Not installed!";}
hash mencoder 2> /dev/null || { echo >&2 "mencoder ..... Not installed!";}
$@
